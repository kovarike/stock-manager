name: Build and Release C Project

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  deployments: write

jobs:
  build_linux_and_windows:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 make sqlite3 libsqlite3-dev uuid-dev mingw-w64 
          sudo apt-get install -y mingw-w64-x86-64-dev uuid-dev

      - name: Download and build SQLite for Windows
        run: |
          cd /tmp
          wget https://www.sqlite.org/2024/sqlite-autoconf-3460100.tar.gz  
          tar -xzf sqlite-autoconf-3460100.tar.gz
          cd sqlite-autoconf-3460100
          ./configure --host=x86_64-w64-mingw32 --prefix=/usr/x86_64-w64-mingw32
          make
          sudo make install

      - name: Debug environment variables
        run: |
          echo "SQLITE_INCLUDE: $SQLITE_INCLUDE"
          echo "UUID_INCLUDE: $UUID_INCLUDE"
          ls /usr/x86_64-w64-mingw32/include

      # Compilar para Linux
      - name: Build for Linux
        run: |
          cd src
          make clean
          make CC=gcc  # Compila com GCC para Linux

      - name: Package Linux Binary
        run: |
          if [ -f ./src/StockManager ]; then
            cd src
            tar -czvf StockManager-linux.tar.gz StockManager
            echo "STOCKMANAGER_LINUX_PACKAGE=src/StockManager-linux.tar.gz" >> $GITHUB_ENV
          else
            echo "Linux binary not found!" >&2
            exit 1
          fi

      # Compilar para Windows usando MinGW
      - name: Build for Windows
        run: |
          cd src
          make clean
          make CC=x86_64-w64-mingw32-gcc  # Compila com MinGW para Windows

      - name: Package Windows Binary
        run: |
          if [ -f ./src/StockManager.exe ]; then
            cd src
            zip StockManager-windows.zip StockManager.exe
            echo "STOCKMANAGER_WINDOWS_PACKAGE=src/StockManager-windows.zip" >> $GITHUB_ENV
          else
            echo "Windows binary not found!" >&2
            exit 1
          fi

      # Upload dos bin√°rios como artefatos
      - name: Upload Linux Binary as artifact
        uses: actions/upload-artifact@v3
        with:
          name: StockManager-linux
          path: ${{ env.STOCKMANAGER_LINUX_PACKAGE }}

      - name: Upload Windows Binary as artifact
        uses: actions/upload-artifact@v3
        with:
          name: StockManager-windows
          path: ${{ env.STOCKMANAGER_WINDOWS_PACKAGE }}

  release:
    runs-on: ubuntu-latest
    needs: build_linux_and_windows

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.0-${{ github.run_number }}
          release_name: "Release v1.0.0"
          draft: false
          prerelease: false

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./src/${{ env.STOCKMANAGER_LINUX_PACKAGE }}
          asset_name: StockManager-linux.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./src/${{ env.STOCKMANAGER_WINDOWS_PACKAGE }}
          asset_name: StockManager-windows.zip
          asset_content_type: application/zip
