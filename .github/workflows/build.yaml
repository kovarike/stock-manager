name: Build for C Project

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        compiler: [gcc, clang]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up build environment (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libsqlite3-dev uuid-dev clang

    - name: Set up build environment (Windows)
      if: runner.os == 'Windows'
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        .\bootstrap-vcpkg.bat
        ./vcpkg integrate install
        cd ..
        .\vcpkg\vcpkg install sqlite3 boost-uuid
        echo "VCPKG_ROOT=$(pwd)/vcpkg" >> $GITHUB_ENV

    - name: Build with ${{ matrix.compiler }}
      run: |
        cd src
        make clean
        make CC=${{ matrix.compiler }} CFLAGS="-I${{ env.VCPKG_ROOT }}/installed/x64-windows/include"

    - name: Package Binaries
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          if [ -f ./src/StockManager ]; then
            tar -czvf StockManager-linux.tar.gz ./src/StockManager
            echo "STOCKMANAGER_PACKAGE=StockManager-linux.tar.gz" >> $GITHUB_ENV
          else
            echo "StockManager binary not found!" >&2
            exit 1
          fi
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          if [ -f ./src/StockManager.exe ]; then
            powershell -Command "Compress-Archive -Path .\src\StockManager.exe -DestinationPath StockManager-windows.zip"
            echo "STOCKMANAGER_PACKAGE=StockManager-windows.zip" >> $GITHUB_ENV
          else
            echo "StockManager.exe binary not found!" >&2
            exit 1
          fi
        fi

    - name: Upload binaries as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Binaries-${{ matrix.os }}-${{ matrix.compiler }}
        path: ${{ env.STOCKMANAGER_PACKAGE }}

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.0  # Consider making this dynamic
        release_name: "Release v1.0.0"
        draft: false
        prerelease: false

    - name: Upload Linux Release Asset
      if: ${{ matrix.os == 'ubuntu-latest' }}
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: StockManager-linux.tar.gz
        asset_name: StockManager-linux.tar.gz
        asset_content_type: application/gzip

    - name: Upload Windows Release Asset
      if: ${{ matrix.os == 'windows-latest' }}
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: StockManager-windows.zip
        asset_name: StockManager-windows.zip  
        asset_content_type: application/zip
