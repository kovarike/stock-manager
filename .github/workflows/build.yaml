name: Build for C Project

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        compiler: [gcc, clang]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up build environment (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libsqlite3-dev uuid-dev clang

    - name: Set up build environment (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install mingw -y --yes
        powershell -Command "Invoke-WebRequest -Uri 'https://www.sqlite.org/2023/sqlite-dll-win32-x86-3390500.zip' -OutFile 'sqlite-dll-win32-x86-3390500.zip'"
        powershell -Command "Expand-Archive -Path 'sqlite-dll-win32-x86-3390500.zip' -DestinationPath 'C:\usr\local\lib'"

    - name: Build with ${{ matrix.compiler }}
      run: |
        cd src
        make clean
        make CC=${{ matrix.compiler }}

    - name: Package Binaries
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          tar -czvf StockManager-linux.tar.gz ./StockManager
          echo "StockManager-linux.tar.gz" >> $GITHUB_ENV
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          powershell -Command "Compress-Archive -Path .\StockManager.exe -DestinationPath StockManager-windows.zip"
          echo "StockManager-windows.zip" >> $GITHUB_ENV
        fi

    - name: Upload binaries as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Binaries-${{ matrix.os }}-${{ matrix.compiler }}
        path: ${{ env.GITHUB_ENV }}

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.0
        release_name: "Release v1.0.0"
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/StockManager-linux.tar.gz  # Altere o caminho conforme necess√°rio
        asset_name: StockManager-linux.tar.gz
        asset_content_type: application/gzip

    - name: Upload Windows Binary
      if: needs.build.outputs.binaries == 'StockManager-windows.zip'
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/StockManager-windows.zip
        asset_name: StockManager-windows.zip
        asset_content_type: application/zip
